<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2004 Archit Baweja <bighead@users.sourceforge.net>
 Copyright (C) 2005 Michael Witrant <mike@lepton.fr>
 Copyright (C) 2006 Gabriel Bauman <gbauman@gmail.com>
 Copyright (C) 2009 Alexandre da Silva <lexrupy@gmail.com>

 This library is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

-->
<language id="rubyonrails" _name="RubyOnRails" version="2.0" _section="Scripts">
  <metadata>
    <property name="mimetypes">application/x-ruby;text/x-ruby</property>
    <property name="globs">*.rb;*.ru</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="escape"                _name="Escaped Character"     map-to="def:special-char"/>
    <style id="comment"               _name="Comment"               map-to="def:comment"/>
    <style id="attribute-definition"  _name="Attribute Definition"  map-to="def:statement"/>
    <style id="module-handler"        _name="Module handler"        map-to="def:preprocessor"/>
    <style id="keyword"               _name="Keyword"               map-to="def:keyword"/>
    <style id="nil-value"             _name="Nil Constant"          map-to="def:special-constant"/>
    <style id="boolean"               _name="Boolean value"         map-to="def:boolean"/>
    <style id="floating-point"        _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"               _name="Decimal number"        map-to="def:decimal"/>
    <style id="base-n-integer"        _name="Base-N number"         map-to="def:base-n-integer"/>
    <style id="numeric-literal"       _name="Numeric literal"       map-to="def:base-n-integer"/>
    <style id="string"                _name="String"                map-to="def:string"/>
    <style id="builtin"               _name="Builtin"               map-to="def:type"/>
    <style id="constant"              _name="Constant"              map-to="def:type"/>
    <style id="symbol"                _name="Symbol"                map-to="def:string"/>
    <style id="operators"             _name="Operators"             map-to="def:keyword"/>
    <style id="instance-variable"     _name="Instance Variable"     map-to="def:identifier"/>
    <style id="global-variable"       _name="Global Variable"       map-to="def:identifier"/>
    <style id="class-variable"        _name="Class Variable"        map-to="def:identifier"/>
    <style id="simple-interpolation"  _name="Simple Interpolation"  map-to="def:string"/>
    <style id="complex-interpolation" _name="Complex Interpolation" map-to="def:string"/>
    <style id="special-variable"      _name="Special Variable"      map-to="def:identifier"/>
    <style id="predefined-variable"   _name="Predefined Variable"   map-to="def:identifier"/>
    <style id="variable"              _name="Variable"              map-to="def:identifier"/>
    <style id="here-doc"              _name="Heredoc"               map-to="def:string" />
    <style id="here-doc-bound"        _name="Heredoc Bound"         map-to="def:string"/>
    <style id="regex"                 _name="Regular Expression"    map-to="def:identifier"/>
    <style id="class-definition"      _name="Class Definition"      map-to="def:identifier"/>
    <style id="function-definition"   _name="Function Definition"   map-to="def:function"/>
    <style id="class-name"            _name="Ruby Class Name"       map-to="def:identifier"/>
    <style id="class-inherit"         _name="Ruby Inherited Class"  map-to="def:identifier"/>
    <style id="module-name"           _name="Ruby Inherited Class"  map-to="def:identifier"/>
    <style id="block-parameter"       _name="Parameters in blocks"  map-to="def:identifier"/>
    <style id="support-constant"     _name="Ruby Support Constants" map-to="def:builtin"/>

    <style id="rails"                 _name="Rails constants"       map-to="def:identifier"/>
  </styles>

  <definitions>

    <context id="escape" style-ref="escape">
      <match>\\((0-7){3}|(x[a-fA-F0-9]{2})|(c\S)|([CM]-\S)|(M-C-\S)|.)</match>
    </context>

    <!-- Ruby Syntax documentation inform beginning of line,
         but can have spaces between beginning and =begin, =end keywords -->
    <context id="multiline-comment" style-ref="comment" class-disabled="no-spell-check">
      <start>^\s*=begin</start>
      <end>^\s*=end</end>
      <include>
        <context ref="escape"/>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="attribute-definitions" style-ref="attribute-definition">
      <keyword>attr</keyword>
      <keyword>attr_writer</keyword>
      <keyword>attr_reader</keyword>
      <keyword>attr_accessor</keyword>
    </context>

    <context id="definitions" style-ref="keyword">
      <!-- do not highlight the .class method -->
      <prefix>(?&lt;![\w\.])</prefix>
      <keyword>alias</keyword>
      <keyword>class</keyword>
      <keyword>module</keyword>
      <keyword>def</keyword>
      <keyword>undef</keyword>
    </context>

    <context id="module-handlers" style-ref="module-handler">
      <keyword>require</keyword>
      <keyword>gem</keyword>
      <keyword>include</keyword>
      <keyword>load</keyword>
      <keyword>extend</keyword>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>new</keyword>
      <keyword>BEGIN</keyword>
      <keyword>END</keyword>
      <keyword>and</keyword>
      <keyword>begin</keyword>
      <keyword>break</keyword>
      <keyword>case</keyword>
      <keyword>catch</keyword>
      <keyword>defined?</keyword>
      <keyword>do</keyword>
      <keyword>else</keyword>
      <keyword>elsif</keyword>
      <keyword>end</keyword>
      <keyword>ensure</keyword>
      <keyword>for</keyword>
      <keyword>if</keyword>
      <keyword>in</keyword>
      <keyword>next</keyword>
      <keyword>not</keyword>
      <keyword>or</keyword>
      <keyword>private</keyword>
      <keyword>protected</keyword>
      <keyword>public</keyword>
      <keyword>redo</keyword>
      <keyword>rescue</keyword>
      <keyword>retry</keyword>
      <keyword>return</keyword>
      <keyword>then</keyword>
      <keyword>throw</keyword>
      <keyword>unless</keyword>
      <keyword>until</keyword>
      <keyword>when</keyword>
      <keyword>while</keyword>
      <keyword>yield</keyword>
    </context>

    <context id="builtins" style-ref="builtin">
      <keyword>ARGF</keyword>
      <keyword>ARGV</keyword>
      <keyword>Abbrev</keyword>
      <keyword>ArgumentError</keyword>
      <keyword>Array</keyword>
      <keyword>Base64</keyword>
      <keyword>Benchmark::Tms</keyword>
      <keyword>Benchmark</keyword>
      <keyword>Bignum</keyword>
      <keyword>Binding</keyword>
      <keyword>CGI::Cookie</keyword>
      <keyword>CGI::HtmlExtension</keyword>
      <keyword>CGI::QueryExtension</keyword>
      <keyword>CGI::Session::FileStore</keyword>
      <keyword>CGI::Session::MemoryStore</keyword>
      <keyword>CGI::Session</keyword>
      <keyword>CGI</keyword>
      <keyword>Class</keyword>
      <keyword>Comparable</keyword>
      <keyword>Complex</keyword>
      <keyword>ConditionVariable</keyword>
      <keyword>Continuation</keyword>
      <keyword>DATA</keyword>
      <keyword>Data</keyword>
      <keyword>Date</keyword>
      <keyword>DateTime</keyword>
      <keyword>Delegator</keyword>
      <keyword>Dir</keyword>
      <keyword>ENV</keyword>
      <keyword>EOFError</keyword>
      <keyword>ERB::Util</keyword>
      <keyword>ERB</keyword>
      <keyword>Enumerable::Enumerator</keyword>
      <keyword>Enumerable</keyword>
      <keyword>Errno</keyword>
      <keyword>Exception</keyword>
      <keyword>FalseClass</keyword>
      <keyword>File::Constants</keyword>
      <keyword>File::Stat</keyword>
      <keyword>File</keyword>
      <keyword>FileTest</keyword>
      <keyword>FileUtils::DryRun</keyword>
      <keyword>FileUtils::NoWrite</keyword>
      <keyword>FileUtils::StreamUtils</keyword>
      <keyword>FileUtils::Verbose</keyword>
      <keyword>FileUtils</keyword>
      <keyword>Find</keyword>
      <keyword>Fixnum</keyword>
      <keyword>Float</keyword>
      <keyword>FloatDomainError</keyword>
      <keyword>Forwardable</keyword>
      <keyword>GC</keyword>
      <keyword>Generator</keyword>
      <keyword>Hash</keyword>
      <keyword>IO</keyword>
      <keyword>IOError</keyword>
      <keyword>Iconv::BrokenLibrary</keyword>
      <keyword>Iconv::Failure</keyword>
      <keyword>Iconv::IllegalSequence</keyword>
      <keyword>Iconv::InvalidCharacter</keyword>
      <keyword>Iconv::InvalidEncoding</keyword>
      <keyword>Iconv::OutOfRange</keyword>
      <keyword>Iconv</keyword>
      <keyword>IndexError</keyword>
      <keyword>Integer</keyword>
      <keyword>Interrupt</keyword>
      <keyword>Kernel</keyword>
      <keyword>LoadError</keyword>
      <keyword>LocalJumpError</keyword>
      <keyword>Logger::Application</keyword>
      <keyword>Logger::Error</keyword>
      <keyword>Logger::Formatter</keyword>
      <keyword>Logger::LogDevice::LogDeviceMutex</keyword>
      <keyword>Logger::LogDevice</keyword>
      <keyword>Logger::Severity</keyword>
      <keyword>Logger::ShiftingError</keyword>
      <keyword>Logger</keyword>
      <keyword>Marshal</keyword>
      <keyword>MatchData</keyword>
      <keyword>Math</keyword>
      <keyword>Matrix</keyword>
      <keyword>Method</keyword>
      <keyword>Module</keyword>
      <keyword>Mutex</keyword>
      <keyword>NameError::message</keyword>
      <keyword>NameError</keyword>
      <keyword>NilClass</keyword>
      <keyword>NoMemoryError</keyword>
      <keyword>NoMethodError</keyword>
      <keyword>NotImplementedError</keyword>
      <keyword>Numeric</keyword>
      <keyword>Object</keyword>
      <keyword>ObjectSpace</keyword>
      <keyword>Observable</keyword>
      <keyword>PStore::Error</keyword>
      <keyword>PStore</keyword>
      <keyword>Pathname</keyword>
      <keyword>Precision</keyword>
      <keyword>Proc</keyword>
      <keyword>Process::GID</keyword>
      <keyword>Process::Status</keyword>
      <keyword>Process::Sys</keyword>
      <keyword>Process::UID</keyword>
      <keyword>Process</keyword>
      <keyword>Queue</keyword>
      <keyword>RUBY_PLATFORM</keyword>
      <keyword>RUBY_RELEASE_DATE</keyword>
      <keyword>RUBY_VERSION</keyword>
      <keyword>Range</keyword>
      <keyword>RangeError</keyword>
      <keyword>Rational</keyword>
      <keyword>Regexp</keyword>
      <keyword>RegexpError</keyword>
      <keyword>RuntimeError</keyword>
      <keyword>STDERR</keyword>
      <keyword>STDIN</keyword>
      <keyword>STDOUT</keyword>
      <keyword>ScriptError</keyword>
      <keyword>SecurityError</keyword>
      <keyword>Set</keyword>
      <keyword>Shellwords</keyword>
      <keyword>Signal</keyword>
      <keyword>SignalException</keyword>
      <keyword>SimpleDelegator</keyword>
      <keyword>SingleForwardable</keyword>
      <keyword>Singleton</keyword>
      <keyword>SingletonClassMethods</keyword>
      <keyword>SizedQueue</keyword>
      <keyword>SortedSet</keyword>
      <keyword>StandardError</keyword>
      <keyword>String</keyword>
      <keyword>StringIO</keyword>
      <keyword>StringScanner::Error</keyword>
      <keyword>StringScanner</keyword>
      <keyword>Struct::Tms</keyword>
      <keyword>Struct</keyword>
      <keyword>Symbol</keyword>
      <keyword>SyncEnumerator</keyword>
      <keyword>SyntaxError</keyword>
      <keyword>SystemCallError</keyword>
      <keyword>SystemExit</keyword>
      <keyword>SystemStackError</keyword>
      <keyword>Tempfile</keyword>
      <keyword>Test::Unit</keyword>
      <keyword>Test</keyword>
      <keyword>Thread</keyword>
      <keyword>ThreadError</keyword>
      <keyword>ThreadGroup</keyword>
      <keyword>ThreadsWait</keyword>
      <keyword>Time</keyword>
      <keyword>Timeout::Error</keyword>
      <keyword>Timeout</keyword>
      <keyword>TrueClass</keyword>
      <keyword>TypeError</keyword>
      <keyword>URI::BadURIError</keyword>
      <keyword>URI::Error</keyword>
      <keyword>URI::Escape</keyword>
      <keyword>URI::FTP</keyword>
      <keyword>URI::Generic</keyword>
      <keyword>URI::HTTP</keyword>
      <keyword>URI::HTTPS</keyword>
      <keyword>URI::InvalidComponentError</keyword>
      <keyword>URI::InvalidURIError</keyword>
      <keyword>URI::LDAP</keyword>
      <keyword>URI::MailTo</keyword>
      <keyword>URI::REGEXP::PATTERN</keyword>
      <keyword>URI::REGEXP</keyword>
      <keyword>URI</keyword>
      <keyword>UnboundMethod</keyword>
      <keyword>Vector</keyword>
      <keyword>YAML</keyword>
      <keyword>ZeroDivisionError</keyword>
      <keyword>Zlib::BufError</keyword>
      <keyword>Zlib::DataError</keyword>
      <keyword>Zlib::Deflate</keyword>
      <keyword>Zlib::Error</keyword>
      <keyword>Zlib::GzipFile::CRCError</keyword>
      <keyword>Zlib::GzipFile::Error</keyword>
      <keyword>Zlib::GzipFile::LengthError</keyword>
      <keyword>Zlib::GzipFile::NoFooter</keyword>
      <keyword>Zlib::GzipFile</keyword>
      <keyword>Zlib::GzipReader</keyword>
      <keyword>Zlib::GzipWriter</keyword>
      <keyword>Zlib::Inflate</keyword>
      <keyword>Zlib::MemError</keyword>
      <keyword>Zlib::NeedDict</keyword>
      <keyword>Zlib::StreamEnd</keyword>
      <keyword>Zlib::StreamError</keyword>
      <keyword>Zlib::VersionError</keyword>
      <keyword>Zlib::ZStream</keyword>
      <keyword>Zlib</keyword>
      <keyword>fatal</keyword>
    </context>

    <context id="special-variables" style-ref="special-variable">
      <keyword>self</keyword>
      <keyword>super</keyword>
      <keyword>__FILE__</keyword>
      <keyword>__LINE__</keyword>
    </context>

    <context id="predefined-variables" style-ref="predefined-variable">
      <match extended="true">
        \$([!$&amp;"'*+,./0:;&lt;=&gt;?@\`~1-9]|
           -[0FIKadilpvw]|
           (deferr|defout|stderr|stdin|stdout|
            DEBUG|FILENAME|KCODE|LOADED_FEATURES|LOAD_PATH|
            PROGRAM_NAME|SAFE|VERBOSE)\b)
      </match>
    </context>

    <context id="global-variables" style-ref="global-variable">
      <match>\$[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="class-variables" style-ref="class-variable">
      <match>@@[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="instance-variables" style-ref="instance-variable">
      <match>@[a-zA-Z_][a-zA-Z0-9_]*</match>
    </context>

    <context id="symbols" style-ref="symbol">
      <match>(?&lt;!:):[a-zA-Z0-9_]+(!|\?)?</match>
    </context>


    <context id="symbols-single-quoted" style-ref="symbol">
      <start>:'</start>
      <end>'</end>
    </context>


    <context id="symbols-double-quoted" style-ref="symbol">
      <start>:"</start>
      <end>"</end>
    </context>

    <context id="regexp-variables" style-ref="regex">
      <match>\$[1-9][0-9]*</match>
    </context>

    <context id="constants" style-ref="constant">
      <match>\b[A-Z][A-Za-z0-9_]\w*\b</match>
    </context>

    <context id="support-constants" style-ref="support-constant">
      <match>\b[A-Z][A-Za-z0-9_]\w*\b\.</match>
    </context>

    <context id="class-name" style-ref="class-name"><match/></context>
    <context id="class-inherit" style-ref="class-inherit"><match/></context>

    <context id="class-definition">
        <match>^\s*(class)\s+(\b[A-Za-z_:]*\b)(\s+(&lt;)\s+(\b[A-Za-z_:]*\b))?</match>
        <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="2" style-ref="class-name"/>
            <context sub-pattern="4" style-ref="operators"/>
            <context sub-pattern="5" style-ref="class-inherit"/>
        </include>
    </context>

    <context id="module-name" style-ref="module-name"><match/></context>

    <context id="module-definition">
        <match>^\s*(module)\s+(\b[A-Za-z_:]*\b)</match>
        <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="2" style-ref="module-name"/>
        </include>
    </context>

    <context id="function-definition">
        <match>(?=def\b)(def)\s+([A-Za-z_]\w*\.)?([A-Za-z_]\w*[\?!=]?|===?|&gt;[&gt;=]?|&lt;=&gt;|&lt;[&lt;=]?|[%&amp;`/\|]|\*\*?|=?~|[-+]@?|\[\]=?)</match>
        <include>
            <context sub-pattern="1" style-ref="keyword"/>
            <context sub-pattern="2" style-ref="function-definition"/>
            <context sub-pattern="3" style-ref="function-definition"/>
        </include>
    </context>

    <context id="nil-value" style-ref="nil-value">
      <keyword>NIL</keyword>
      <keyword>nil</keyword>
    </context>

    <context id="operator" style-ref="operators">
      <match>&lt;=&gt;|(?&lt;!%)=(?!&gt;)|~|&lt;|&amp;|(?&lt;!=)&gt;|\*|/|\+|-|\||!</match>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>FALSE</keyword>
      <keyword>TRUE</keyword>
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <define-regex id="underscore_num">\d(_?\d)*</define-regex>

    <define-regex id="float" extended="true">
      ( (\%{underscore_num})?\.\%{underscore_num} | \%{underscore_num}\. ) |
      ( (\%{underscore_num}|(\%{underscore_num})?\.\%{underscore_num}|\%{underscore_num}\.)[eE][+-]?\%{underscore_num} )
    </define-regex>

    <context id="float" style-ref="floating-point">
      <match>(?&lt;![\w\.])\%{float}(?![\w\.])</match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match>(?&lt;![\w\.])([1-9](_?[0-9])*|0)(?![\w\.])</match>
    </context>

    <context id="hex" style-ref="base-n-integer">
      <match>(?&lt;![\w\.])0[xX][0-9A-Fa-f](_?[0-9A-Fa-f])*(?![\w\.])</match>
    </context>

    <context id="octal" style-ref="base-n-integer">
      <match>(?&lt;![\w\.])0[0-7](_?[0-7])*(?![\w\.])</match>
    </context>

    <context id="binary" style-ref="base-n-integer">
      <match>(?&lt;![\w\.])0[bB][01](_?[01])*(?![\w\.])</match>
    </context>

    <context id="numeric-literal" style-ref="numeric-literal">
      <match>(?&lt;![\w\.])\?((\\[MC]-){1,2}|\\?)\S</match>
    </context>

    <context id="block-parameters" style-ref="block-parameter">
      <start>(?&lt;=do|\{)(\s*)?\|</start>
      <end>\|</end>
      <include>
        <context ref="class-variables"/>
        <context ref="instance-variables"/>
        <context ref="global-variables"/>
        <context ref="keywords"/>
        <context ref="builtins"/>
        <context ref="symbols"/>
        <context ref="symbols-single-quoted"/>
        <context ref="symbols-double-quoted"/>
        <context ref="nil-value"/>
        <context ref="boolean"/>
        <context ref="constants"/>
        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="hex"/>
        <context ref="octal"/>
        <context ref="binary"/>
        <context ref="numeric-literal"/>
        <context ref="regex-simple"/>
        <!-- context ref="operator"/ -->
      </include>
    </context>

    <!-- in double quotes and backticks
         XXX: Removed original interpolation since it's not work properly
         instead, exposed the complex-interpolation so it can be colored.
    -->
    <context id="simple-interpolation" style-ref="simple-interpolation">
      <start>#(?=[@$])</start> <!-- need assertion to not highlight single # -->
      <end></end>
      <!--include>
        <context ref="class-variables"/>
        <context ref="instance-variables"/>
        <context ref="global-variables"/>
      </include-->
    </context>

    <!-- in double quotes and backticks
         FIXME: really would like for the syntax highlight to go back
         to none here, as any ruby code could go here
         XXX: Removed original interpolation since it's not work properly
         instead, exposed the complex-interpolation so it can be colored.
    -->
    <context id="complex-interpolation" style-ref="complex-interpolation">
      <start>#{</start>
      <end>}</end>
      <!--include>
        <context ref="ruby:*"/>
      </include-->
    </context>

    <!-- ruby strings do not end at line end,
         so we cannot use def:string
         (parts lifted from perl.lang) -->
    <context id="double-quoted-string" style-ref="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" class-disabled="no-spell-check">
      <start>'</start>
      <end>'</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- The following 4 contexts should be easyer. if we have a way to match
         the closing bracket directly we could predict the closing by openning
         and put all in one context. If someone have knownledge about this
         please contribute.
         %Q{Hello world} %{Hello world} -->
    <context id="query-string1" style-ref="string">
      <start>%Q?{</start>
      <end>}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %Q(Hello world) %(Hello world) -->
    <context id="query-string2" style-ref="string">
      <start>%Q?\(</start>
      <end>\)</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %Q[Hello world] %[Hello world] -->
    <context id="query-string3" style-ref="string">
      <start>%Q?\[</start>
      <end>\]</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %Q<Hello world> %<Hello world> -->
    <context id="query-string4" style-ref="string">
      <start>%Q?&lt;</start>
      <end>&gt;</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %Q-Hello world- %-Hello world- %+hello world+ and so on...
         %>some text> is still valid, but is not included to avoid conflicts
         when using with erb tags inside rhtml documents.
    -->
    <context id="query-string5" style-ref="string">
      <start>%Q([^[:alpha:]&gt;])</start>
      <end>\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- Basicly same as above but with no support for interpolations
         %q{Hello world} -->
    <context id="query-string-simple1" style-ref="string">
      <start>%q{</start>
      <end>}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q(Hello world) -->
    <context id="query-string-simple2" style-ref="string">
      <start>%q\(</start>
      <end>\)</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q[Hello world] -->
    <context id="query-string-simple3" style-ref="string">
      <start>%q\[</start>
      <end>\]</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q<Hello world> -->
    <context id="query-string-simple4" style-ref="string">
      <start>%q&lt;</start>
      <end>&gt;</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %q-Hello world- %q+Hello world+ %q*Hello world* and so on... -->
    <context id="query-string-simple5" style-ref="string">
      <start>%q([^[:alpha:]&gt;])</start>
      <end>\%{1@start}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- Arrays of strings
         %W{Array of #{interpolated} strings} -->
    <context id="string-array1" style-ref="string">
      <start>%W{</start>
      <end>}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %W(Array of #{interpolated} strings) -->
    <context id="string-array2" style-ref="string">
      <start>%W\(</start>
      <end>\)</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %W[Array of #{interpolated} strings] -->
    <context id="string-array3" style-ref="string">
      <start>%W\[</start>
      <end>\]</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %W<Array of #{interpolated} strings> -->
    <context id="string-array4" style-ref="string">
      <start>%W&lt;</start>
      <end>&gt;</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- %W-Array of #{interpolated} strings-
         %W+Array of #{interpolated} strings+
         y%W*Array of #{interpolated} strings* and so on... -->
    <context id="string-array5" style-ref="string">
      <start>%W([^[:alpha:]\s])</start>
      <end>\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <!-- Basicly same as above but with no support for interpolations -->
    <!-- %w{Array of strings} -->
    <context id="string-array-simple1" style-ref="string">
      <start>%w{</start>
      <end>}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w(Array of strings) -->
    <context id="string-array-simple2" style-ref="string">
      <start>%w\(</start>
      <end>\)</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w[Array of strings] -->
    <context id="string-array-simple3" style-ref="string">
      <start>%w\[</start>
      <end>\]</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w<Array of strings> -->
    <context id="string-array-simple4" style-ref="string">
      <start>%w&lt;</start>
      <end>&gt;</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>

    <!-- %w-Array of strings- %w+Array of strings+ %w*Array of strings* and so on... -->
    <context id="string-array-simple5" style-ref="string">
      <start>%w([^[:alpha:]\s])</start>
      <end>\%{1@start}</end>
      <include>
        <context style-ref="escape">
          <match>\\['\\]</match>
        </context>
      </include>
    </context>


    <context id="backtick-quoted-string" style-ref="string">
      <start>`</start>
      <end>`</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <context id="here-doc-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;(\w+)</start>
      <end>^\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <context id="here-doc-indented-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;-(\w+)</start>
      <end>^\s*\%{1@start}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>

    <context id="here-doc-single-quoted-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;'(\w+)'</start>
      <end>^\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
      </include>
    </context>

    <context id="here-doc-double-quoted-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;"(\w+)"</start>
      <end>^\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>
    
    <context id="here-doc-backtick-quoted-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;`(\w+)`</start>
      <end>^\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>
    
    <context id="here-doc-single-quoted-indented-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;-'(\w+)'</start>
      <end>^\s*\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
      </include>
    </context>

    <context id="here-doc-double-quoted-indented-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;-"(\w+)"</start>
      <end>^\s*\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>
    
    <context id="here-doc-backtick-quoted-indented-string" style-ref="here-doc" style-inside="true">
      <start>&lt;&lt;-`(\w+)`</start>
      <end>^\s*\%{1@start}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
      </include>
    </context>
    
    <define-regex id="regex-opts">[iomx]*[neus]?[iomx]*</define-regex>

    <context id="regex-bracketed" style-ref="escape" style-inside="true">
      <start>(?&lt;!\\)[[]</start>
      <end>(?&lt;!\\)]</end>
    </context>

    <context id="regex-alt-form" style-ref="regex">
      <start>\%r\|</start>
      <end>\|\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
        <context ref="regex-bracketed"/>
       </include>
     </context>

    <context id="regex-alt-form2" style-ref="regex">
      <start>\%r\{</start>
      <end>\}\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
        <context ref="regex-bracketed"/>
       </include>
     </context>

    <context id="regex-simple" style-ref="regex">
      <start extended="true">
        ((?&lt;=([(]|\s))|^)
        \/
        (?=
          ([^/\\]*(\\.))*
          [^/]*
          \/
          \%{regex-opts}
          ([),;.]|\s|$)
        )</start>
      <end>\/\%{regex-opts}</end>
      <include>
        <context ref="escape"/>
        <context ref="def:line-continue"/>
        <context ref="complex-interpolation"/>
        <context ref="simple-interpolation"/>
        <context ref="regex-bracketed"/>
      </include>
    </context>

    <context id="rubyonrails" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="def:shell-like-comment"/>
        <context ref="multiline-comment"/>
        <context ref="here-doc-string"/>
        <context ref="here-doc-single-quoted-string"/>
        <context ref="here-doc-double-quoted-string"/>
        <context ref="here-doc-backtick-quoted-string"/>
        <context ref="here-doc-indented-string"/>
        <context ref="here-doc-single-quoted-indented-string"/>
        <context ref="here-doc-double-quoted-indented-string"/>
        <context ref="here-doc-backtick-quoted-indented-string"/>
        <context ref="double-quoted-string"/>
        <context ref="single-quoted-string"/>
        <context ref="query-string1"/>
        <context ref="query-string2"/>
        <context ref="query-string3"/>
        <context ref="query-string4"/>
        <context ref="query-string5"/>
        <context ref="query-string-simple1"/>
        <context ref="query-string-simple2"/>
        <context ref="query-string-simple3"/>
        <context ref="query-string-simple4"/>
        <context ref="query-string-simple5"/>
        <context ref="string-array1"/>
        <context ref="string-array2"/>
        <context ref="string-array3"/>
        <context ref="string-array4"/>
        <context ref="string-array5"/>
        <context ref="string-array-simple1"/>
        <context ref="string-array-simple2"/>
        <context ref="string-array-simple3"/>
        <context ref="string-array-simple4"/>
        <context ref="string-array-simple5"/>
        <context ref="backtick-quoted-string"/>
        <context ref="attribute-definitions"/>
        <context ref="class-definition"/>
        <context ref="module-definition"/>
        <context ref="function-definition"/>
        <context ref="block-parameters"/>
        <context ref="definitions"/>
        <context ref="module-handlers"/>
        <context ref="keywords"/>
        <context ref="builtins"/>
        <context ref="support-constants"/>
        <context ref="special-variables"/>
        <context ref="predefined-variables"/>
        <context ref="global-variables"/>
        <context ref="class-variables"/>
        <context ref="instance-variables"/>
        <context ref="symbols"/>
        <context ref="symbols-single-quoted"/>
        <context ref="symbols-double-quoted"/>
        <context ref="regexp-variables"/>
        <context ref="nil-value"/>
        <context ref="boolean"/>
        <context ref="constants"/>
        <context ref="float"/>
        <context ref="decimal"/>
        <context ref="hex"/>
        <context ref="octal"/>
        <context ref="binary"/>
        <context ref="numeric-literal"/>
        <context ref="regex-alt-form"/>
        <context ref="regex-alt-form2"/>
        <context ref="regex-simple"/>
        <context ref="simple-interpolation"/>
        <context ref="complex-interpolation"/>
        <context ref="operator"/>
        <!-- Include Rails Style -->
        <context ref="keywords-rails"/>
      </include>
    </context>
    <!-- Rails Keywords -->
    <context id="keywords-rails" style-ref="rails">
      <keyword>before_filter</keyword>
      <keyword>skip_before_filter</keyword>
      <keyword>skip_after_filter</keyword>
      <keyword>after_filter</keyword>
      <keyword>around_filter</keyword>
      <keyword>filter</keyword>
      <keyword>filter_parameter_logging</keyword>
      <keyword>protect_from_forgery</keyword>
      <keyword>layout</keyword>
      <keyword>require_dependency</keyword>
      <keyword>render</keyword>
      <keyword>render_action</keyword>
      <keyword>render_text</keyword>
      <keyword>render_file</keyword>
      <keyword>render_template</keyword>
      <keyword>render_nothing</keyword>
      <keyword>render_component</keyword>
      <keyword>render_without_layout</keyword>
      <keyword>url_for</keyword>
      <keyword>content_for</keyword>
      <keyword>redirect_to</keyword>
      <keyword>redirect_to_path</keyword>
      <keyword>redirect_to_url</keyword>
      <keyword>link_to</keyword>
      <keyword>link_to_remote</keyword>
      <keyword>link_to_function</keyword>
      <keyword>link_to_if</keyword>
      <keyword>link_to_current</keyword>
      <keyword>link_to_unless_current</keyword>
      <keyword>helper</keyword>
      <keyword>helper_method</keyword>
      <keyword>model</keyword>
      <keyword>service</keyword>
      <keyword>observer</keyword>
      <keyword>serialize</keyword>
      <keyword>scaffold</keyword>
      <keyword>verify</keyword>
      <keyword>hide_action</keyword>
      <!-- Rails Keywords MISC -->
      <keyword>accepts_nested_attributes_for</keyword>
      <keyword>acts_as_list</keyword>
      <keyword>acts_as_tree</keyword>
      <keyword>after_create</keyword>
      <keyword>after_destroy</keyword>
      <keyword>after_save</keyword>
      <keyword>after_update</keyword>
      <keyword>after_validation</keyword>
      <keyword>after_validation_on_create</keyword>
      <keyword>after_validation_on_update</keyword>
      <keyword>before_create</keyword>
      <keyword>before_destroy</keyword>
      <keyword>before_save</keyword>
      <keyword>before_update</keyword>
      <keyword>before_validation</keyword>
      <keyword>before_validation_on_create</keyword>
      <keyword>before_validation_on_update</keyword>
      <keyword>composed_of</keyword>
      <keyword>belongs_to</keyword>
      <keyword>has_one</keyword>
      <keyword>has_many</keyword>
      <keyword>has_and_belongs_to_many</keyword>
      <keyword>helper</keyword>
      <keyword>helper_method</keyword>
      <keyword>validate</keyword>
      <keyword>validate_on_create</keyword>
      <keyword>validates_numericality_of</keyword>
      <keyword>validate_on_update</keyword>
      <keyword>validates_acceptance_of</keyword>
      <keyword>validates_associated</keyword>
      <keyword>validates_confirmation_of</keyword>
      <keyword>validates_each</keyword>
      <keyword>validates_format_of</keyword>
      <keyword>validates_inclusion_of</keyword>
      <keyword>validates_length_of</keyword>
      <keyword>validates_presence_of</keyword>
      <keyword>validates_exclusion_of</keyword>
      <keyword>validates_size_of</keyword>
      <keyword>validates_uniqueness_of</keyword>
      <keyword>attr_protected</keyword>
      <keyword>attr_accessible</keyword>
      <keyword>attr_readonly</keyword>
      <keyword>with_scope</keyword>
      <keyword>named_scope</keyword>
      <keyword>memoize</keyword>
      <keyword>with_options</keyword>
      <keyword>alias_method_chain</keyword>
      <keyword>alias_attribute</keyword>
      <keyword>delegate</keyword>
      <keyword>cattr_accessor</keyword>
      <keyword>cattr_reader</keyword>
      <keyword>cattr_writer</keyword>
      <keyword>mattr_accessor</keyword>
      <keyword>mattr_reader</keyword>
      <keyword>mattr_writer</keyword>
      <keyword>returning</keyword>
      <!-- plugins or tests -->
      <keyword>validates_cpf_of</keyword>
      <keyword>validates_cnpj_of</keyword>
      <keyword>validates_cpf_cpnj_of</keyword>
      <keyword>integrate_views</keyword>
      <keyword>have_text</keyword>
      <keyword>have_tag</keyword>
      <keyword>with_tag</keyword>
      <keyword>without_tag</keyword>
      <keyword>has_no_table</keyword>
      <!-- BaseApp Styles -->
      <keyword>link_to_action</keyword>
      <keyword>link_to_new</keyword>
      <keyword>link_to_edit</keyword>
      <keyword>link_to_go</keyword>
      <keyword>link_to_destroy</keyword>
      <keyword>link_to_show</keyword>
      <keyword>link_to_action</keyword>
      <keyword>link_to_back</keyword>
      <keyword>link_to_search</keyword>
      <keyword>link_to_ext</keyword>
      <keyword>secure_mail_to</keyword>
      <keyword>tab_to</keyword>
      <keyword>yield_or_default</keyword>
    </context>

    <!-- End Keywords -->
  </definitions>
</language>

